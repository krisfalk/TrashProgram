@model MunicipalTrashProgram.Models.IndexViewModel


@{
    ViewBag.Title = "Index";
}

<h2>List of addresses in your route:</h2>

<head>
    <style>
        #map {
            width: 100%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <script>
        function initMap() {
            var mapDiv = document.getElementById('map');
            var map = new google.maps.Map(mapDiv, {
                center: {lat: 43.137174, lng: -88.092327},
                zoom: 9
            });
            @foreach (var item in Model.programmed) {
       <text>
            var marker = new google.maps.Marker({
                position: { lat: @item.lat , lng: @item.lng},
                map: map,
                title: 'Hello World!'
            });</text> }
            var lineCoordinates = [];
            @foreach(var item in Model.programmed)
             {
                <text>
            @*//var latitude = parseFloat(@item.lat);
            //var longitude = parseFloat(@item.lng);*@
            
            coordinates_array = new google.maps.LatLng(@item.lat, @item.lng);
            lineCoordinates.push(coordinates_array);
            @*//new google.maps.LatLng(@item.lat, @item.lng)*@
            </text>
             };
            //var line = new google.maps.Polyline({
            //    path: lineCoordinates,
            //    geodesic: true,
            //    strokeColor: '#FF0000',
            //    strokeOpacity: 1.0,
            //    strokeWeight: 2
            //});

            //line.setMap(map);

            var path = new google.maps.MVCArray();

            var service = new google.maps.DirectionsService();
 
            var poly = new google.maps.Polyline({ map: map, strokeColor: '#4986E7' });
 
            for (var i = 0; i < lineCoordinates.length; i++) {
                if ((i + 1) < lineCoordinates.length) {
                    var src =  lineCoordinates[i];
                    var des = lineCoordinates[i + 1];
                    path.push(src);
                    poly.setPath(path);
                    service.route({
                        origin: src,
                        destination: des,
                        travelMode: google.maps.DirectionsTravelMode.DRIVING
                    }, function (result, status) {
                        if (status == google.maps.DirectionsStatus.OK) {
                            for (var i = 0, len = result.routes[0].overview_path.length; i < len; i++) {
                                path.push(result.routes[0].overview_path[i]);
                            }
                        }
                    });
                }}}
    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD3KoWWl0oYiaKZJBpRBR2lg8_LNH5FuNw&callback=initMap">
    </script>




    @*<html xmlns="http://www.w3.org/1999/xhtml">
        <head id="Head1" runat="server">
            <script src="http://maps.google.com/maps?file=api&v=2&key=AIzaSyD3KoWWl0oYiaKZJBpRBR2lg8_LNH5FuNw"
                    type="text/javascript">
            </script>
            <script type="text/javascript">
                //<![CDATA[

                function load() {
                    if (GBrowserIsCompatible()) {
                        var map = new GMap2(document.getElementById("map"));
                        map.addControl(new GSmallMapControl());
                        map.addControl(new GMapTypeControl());
                        map.setCenter(new GLatLng(43.137174, -88.092327), 9);
                        mapTypeId: google.maps.MapTypeId.ROADMAP;
                    }};
                @foreach (var item in Model.programmed) {
               <text>
                   var marker = new google.maps.Marker({
                   position: { lat: @item.lat , lng: @item.lng},
                   map: map,
                   title: 'Hello World!'
                               });</text> }

                //GDownloadUrl("C:/Users/Kristofer/Documents/GitHub/data.xml", function (data, responseCode) {
                //    var xml = GXml.parse(data);
                //    var markers = xml.documentElement.getElementsByTagName("marker");
                //    for (var i = 0; i < markers.length; i++) {
                //        var point = new GLatLng(parseFloat(markers[i].getAttribute("lat")),
                //                    parseFloat(markers[i].getAttribute("lng")));
                //        map.addOverlay(new GMarker(point));
                //    }
                );

                //]]>
            </script>
        </head>
        <BODY onload="load()" onunload="GUnload()">
            <div id="map" style="width: 100%; height: 420px"></div>
        </BODY>
        </html>*@



    <table class="table">
        <tr>
            <th>
                <text>Home Number:</text>
            </th>
            <th>
                <text>Street:</text>
            </th>
            <th>
                <text>City:</text>
            </th>
            <th>
                <text>State:</text>
            </th>
            <th>
                <text>Zip Code:</text>
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model.myUsers)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Address.HouseNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address.Street)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address.City)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address.State)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address.ZipCode)
                </td>
            </tr>
        }

    </table>
